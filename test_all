#!/usr/bin/env python3

import os
import sys
import argparse

def getDirectory(files, fileName):
	for i in files:
		currentFile = i[0]
		if currentFile == fileName:
			return i[1]
	return False

def getLibc(files):
	for file in files:
		if ("libc" in file) and ("so" in file):
			#print("Found: %s" % file)
			#sys.exit(0)
			return file
	return None

def getCategories(testCases):
	categories = []
	for testCase in testCases:
		directory = testCase[1]
		pathParts = directory.split("/")
		category = pathParts[-2]
		if category not in categories:
			categories.append(pathParts[-2])
	return categories

def getCategory(testCase):
	directory = testCase[1]
	pathParts = directory.split("/")
	category = pathParts[-2]
	return category

def getDict(categories):
	testcases = {}
	for category in categories:
		testcases[category] = []
	return testcases


def printTestcases(testCases):
#print("\nSuccessful Exploit\nTarget: %s\nDirectory: %s\n" % (pwnedTest[0], pwnedTest[1]))
	for testCase in testCases:
		print("\tTarget:\t%s\tDirectory:\t%s" % (testCase[0], testCase[1]))


if __name__ == "__main__":
	parser = argparse.ArgumentParser(description = "Testing utillity for autopwner")
	parser.add_argument("-d", metavar='-D', type=str, help="Subdirectory to test challenges", default=None)

	args = parser.parse_args()

	subDirectory = args.d

	currentDirectory = os.getcwd()

	if subDirectory == None:
		walkDirectory = os.walk(currentDirectory)

	else:
		walkDirectory = os.walk(currentDirectory + "/" + subDirectory)

	testFiles = []
	fileNames = []

	additionalFiles = {}

	for i in walkDirectory:
		if len(i) == 3:
			files = i[2]
			for file in files:
				if "remenissions-work" in i[0]:
					continue
				if "chall-test" in file:
					#print(files)
					fileName = file
					fileDir  = i[0]
					if fileName not in fileNames:
						libc = getLibc(files)
						fileNames.append(fileName)
						if ('libpwnableharness32.so' in files):
							additionalFiles[fileName] = 'libpwnableharness32.so'

						elif ('libpwnableharness64.so' in files):
							additionalFiles[fileName] = 'libpwnableharness64.so'

						if libc == None:
							testFiles.append([fileName, fileDir])
						else:
							testFiles.append([fileName, fileDir, libc])
					else:
						print("\n\nName Confliction\n\n")
						print(fileName)
						print(getDirectory(testFiles, fileName))
						print(fileDir)
						sys.exit()

	pwnedTests = []
	failedTests = []

	categories = getCategories(testFiles)
	passedTestcases = getDict(categories)
	failedTestcases = getDict(categories)

	#print(noTempDirectoryFilenames)
	#sys.exit(0)
	for test in testFiles:
		currentFile = test[0]
		currentDirectory = test[1]
		print("\n\nTesting: %s\nFrom: %s\n" % (currentFile, currentDirectory))
		os.chdir(currentDirectory)
		if len(test) == 2:
			if (currentFile in additionalFiles.keys()):
				output = os.popen('remenissions -b %s -a %s' % (currentFile, additionalFiles[currentFile])).read()
			elif "localLibcId" in currentFile:
				output = os.popen('remenissions -b %s -d localLibcId' % (currentFile)).read()
			else:
				output = os.popen('remenissions -b %s' % currentFile).read()

		elif len(test) == 3:
			libcFile = test[2]
			print("libc file is: %s" % libcFile)
			if (currentFile in additionalFiles.keys()):
				output = os.popen('remenissions -b %s -l %s -a %s' % (currentFile, libcFile, additionalFiles[currentFile])).read()	
			else:
				output = os.popen('remenissions -b %s -l %s' % (currentFile, libcFile)).read()			
		if "Exploit Successful:" in output:
			#print("\n\nSuccessful Test\nFileName: %s\nDirectory %s\n" % (currentFile, currentDirectory))
			pwnedTests.append([currentFile, currentDirectory])
		else:
			failedTests.append([currentFile, currentDirectory])
			#print("Not Successful Test\nFileName: %s\nDirectory %s\n" % (currentFile, currentDirectory))

	for pwnedTest in pwnedTests:
		category = getCategory(pwnedTest)
		passedTestcases[category].append(pwnedTest)
		#print("\nSuccessful Exploit\nTarget: %s\nDirectory: %s\n" % (pwnedTest[0], pwnedTest[1]))


	for failedTest in failedTests:
		category = getCategory(failedTest)
		failedTestcases[category].append(failedTest)
		#print("\nNot Successful Exploit\nTarget: %s\nDirectory: %s\n" % (failedTest[0], failedTest[1]))

	overallPtNum = 0
	overallFtNum = 0
	overallTotalNum = 0
	for category in categories:
		pt = passedTestcases[category]
		ft = failedTestcases[category]
		ptNum = len(pt)
		ftNum = len(ft)
		totalNum = ptNum + ftNum
		print("\n\nCategory: \t\t%s" % str(category))
		print("Total Testcases  \tCount: %d" % totalNum)
		print("Passed Testcases \tCount: %d" % ptNum)
		print("Failed Testcases \tCount: %d" % ftNum)
		print("Passed Testcasses: ")
		printTestcases(pt)
		print("Failed Testcases: ")
		printTestcases(ft)
		overallPtNum += ptNum
		overallFtNum += ftNum
		overallTotalNum += totalNum

	print("\n\nTotal Testcases: \t%d" % overallTotalNum)
	print("Total Passes: \t\t%d" % overallPtNum)
	print("Total Failed: \t\t%d" % overallFtNum)